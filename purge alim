#!/bin/ksh

# Default values for the parameters
my_MAKE_BACKUP=1
my_CUSTOM_DELIMITER=";"
my_VALID_COUNT=20
my_BACKUP="backup_option"

show_usage() {
    echo "Usage: $0 <Project Path> <Product> <File List> [-d custom_delimiter] [-v valid_count] [-b backup] [-m make_backup]"
    echo "Example:"
    echo "  $0 /app/list/sd/sid/dev1/ sepa /path/to/filenames.txt -d , -v 10 -b backup_option -m 1"
}

# Parse flags
while getopts "d:v:b:m:" opt; do
    case "$opt" in
    d) my_CUSTOM_DELIMITER="$OPTARG" ;;
    v) my_VALID_COUNT="$OPTARG" ;;
    b) my_BACKUP="$OPTARG" ;;
    m) my_MAKE_BACKUP="$OPTARG" ;;
    ?) show_usage
       exit 1 ;;
    esac
done

# Remove the flags and their corresponding values from the arguments
shift $((OPTIND -1))

# Validate input arguments
if [[ $# -ne 3 ]]; then
    show_usage
    exit 1
fi

my_GpPathProjet="$1"
my_Produit="$2"
my_file_list="$3"  # Path to the file containing the list of filenames



echo "TipTipTipTipTipTi^pTip"
echo "$my_GpPathProjet"


# Load configurations dynamically based on the project path
#. "${my_GpPathProjet}conf/mapr/ods/properties/sidlogparams.properties"
. /app/list/sd/sid/rct1/conf/mapr/ods/properties/sidlogparams.properties

# Function for setting Vertica environment, adapt as needed
function gestion_vertica {
    export LANG="en_US.UTF-8"
    export LC_COLLATE="en_US.UTF-8"
    export LC_CTYPE="en_US.UTF-8"
    export LC_MONETARY="en_US.UTF-8"
    export LC_NUMERIC="en_US.UTF-8"
    export LC_TIME="en_US.UTF-8"
    export LC_MESSAGES="en_US.UTF-8"
    export LC_ALL="en_US.UTF-8"
}

# Setting Vertica and other necessary environments
gestion_vertica

# Function to get LB_NOMTABLE from Vertica
function my_get_nomtable {
    my_produit="$1"
    my_query="SELECT LB_NomTableODS FROM T_ADM_MaprOdsExtract WHERE SourceSid = '${my_produit}'"
    my_nomtable=$(${GpVsql}vsql -h ${GsDWHbaseHostsql} -U ${GsDWHbaseUser} -w ${GsDWHbasepswd} -t -c "${my_query}" | tr -d ' ')
    echo "${my_nomtable}"
}

# Function to process and clean each file
function my_process_single_file {
    my_fichier_entree="$1"
    my_GpPathProjet="$2"
    my_Produit="$3"
    my_LB_NOMTABLE=$(my_get_nomtable "${my_Produit}")
    my_log_file="${my_GpPathProjet}/log/logfile_purgealim.log"
    my_valid_file="${my_GpPathProjet}entree/${my_Produit}/valid_$(basename "${my_fichier_entree}")"
    my_invalid_file="${my_GpPathProjet}entree/${my_Produit}/invalid_$(basename "${my_fichier_entree}")"
    my_current_date=$(date +%Y-%m-%d)

    >"${my_valid_file}"
    >"${my_invalid_file}"

    # Process file and classify lines as valid or invalid
    awk -F"${my_CUSTOM_DELIMITER}" -v valid_count="${my_VALID_COUNT}" -v date="${my_current_date}" -v filename="${my_fichier_entree}" -v tablename="${my_LB_NOMTABLE}" '{
        if(NF-1 == valid_count) {
            print $0 >> "'${my_valid_file}'"
        } else {
            print NR, $0, filename, date, tablename >> "'${my_invalid_file}'"
        }
    }' OFS="|" "${my_fichier_entree}"

    echo "File processed: ${my_fichier_entree}"
    echo "Valid lines saved to: ${my_valid_file}"
    echo "Invalid lines saved to: ${my_invalid_file}"

    # Insert invalid lines into Vertica
    if [[ -s "${my_invalid_file}" ]]; then
        echo "Attempting to insert invalid lines into Vertica..."
        ${GpVsql}vsql -h ${GsDWHbaseHostsql} -B ${BACKUP} -U ${GsDWHbaseUser} -w ${GsDWHbasepswd} -t -c "COPY ${GsDWHbaseSchema}.T_APP_REJ_ODS_GLOBAL(NB_ROWNUM, LB_CONTENU, LB_FILENAME, DT_DREJET, LB_NOMTABLE) FROM LOCAL '$my_invalid_file' DELIMITER E'|' ENFORCELENGTH DIRECT;" > $my_log_file 2>&1
        QUERY_RESULT=$?
        if [[ $QUERY_RESULT -ne 0 ]]; then
            echo "ERROR: Failed to update T_APP_REJ_ODS_GLOBAL with rejected lines. Check log $my_log_file for details."
        else
            echo "$(date +"%Y-%m-%d %H:%M:%S") - Rejected lines have been successfully updated in T_APP_REJ_ODS_GLOBAL."
        fi
        echo "Vertica insertion completed."
    fi

    # Remove invalid file after processing
    rm -f "${my_invalid_file}"

    # Backup and replace file logic
    if [[ ${my_MAKE_BACKUP} -eq 1 ]]; then
        cp "${my_fichier_entree}" "${my_fichier_entree}.backup"
    fi
    if [[ -s "${my_valid_file}" ]]; then
        mv -f "${my_valid_file}" "${my_fichier_entree}"
    else
        echo "No valid lines found. Original file not replaced."
    fi
}

# Function to process files from the list, prepending path project and product to filenames
function my_process_files {
    while IFS= read -r filename; do
        my_fichier_entree="${my_GpPathProjet}/${filename}"  # Construct the full path
        if [[ -f "$my_fichier_entree" ]]; then
            echo "Processing file: $my_fichier_entree"
            my_process_single_file "$my_fichier_entree"
        else
            echo "File $my_fichier_entree not found."
        fi
    done < "$my_file_list"
}

# Call my_process_files function with the file list
my_process_files "$my_file_list"
